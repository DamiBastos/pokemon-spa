{"version":3,"sources":["components/LandingPage.jsx","actions/index.js","components/CardComponent.jsx","components/Paginado.jsx","components/SearchBar.jsx","components/Home.jsx","components/Detail.jsx","App.js","reportWebVitals.js","reducer/index.js","store/index.js","index.js"],"names":["LandingPage","className","to","GET_POKEMONS","GET_DETAIL","GET_TYPES","FILTER_TYPES","SORT_BY_NAME","CLEAN_DETAIL","GET_NAME_POKEMON","getPokemons","dispatch","axios","json","type","payload","data","CardComponent","id","name","img","types","Card","class","Title","Img","variant","src","alt","Text","map","el","Paginado","pokePerPage","allPokemons","paginado","pageNumbers","i","Math","ceil","push","number","Item","onClick","SearchBar","useDispatch","useState","setName","handleSubmit","e","preventDefault","found","getPokemonName","placeholder","onChange","target","value","handleInputChange","onKeyPress","key","Home","useSelector","state","pokemons","allTypesFilt","filter","poke","currentPage","setCurrentPage","indexOfLastPoke","indexOfFirstPoke","currentPoke","slice","setOrden","handleFilterTypes","handleSortByName","useEffect","Container","fluid","Row","Col","md","handleClick","defaultValue","length","pageNumber","style","textDecoration","Detail","props","match","params","next","parseInt","back","getDetail","myPokemon","detail","background","width","height","weight","hp","attack","defense","speed","App","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","myTeam","rootReducer","action","allPoke","filtered","includes","sortedName","sort","a","b","toLowerCase","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.92fb7770.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Style from \"../styles/Landing.css\"\r\n\r\n\r\nexport default function LandingPage() {\r\n\r\n    return(\r\n        <div className=\"landing-conteiner\">\r\n            <div className=\"landing-logo\"></div>\r\n            <div>\r\n                <Link to=\"./home\">\r\n                    <button className=\"landing-button\">\r\n                        <div className=\"logo-button\">\r\n\r\n                        </div>\r\n                    </button>\r\n                </Link>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import axios from \"axios\";\r\n\r\nexport const GET_POKEMONS = \"GET_POKEMONS\"\r\nexport const GET_DETAIL = \"GET_DETAIL\"\r\nexport const GET_POKEMON_NAME = \"GET_POKEMON_NAME\"\r\nexport const GET_TYPES = \"GET_TYPES\"\r\nexport const FILTER_TYPES = \"FILTER_TYPES\"\r\nexport const SORT_BY_NAME = \"SORT_BY_NAME\"\r\nexport const MY_TEAM = \"MY_TEAM\"\r\nexport const CLEAN_DETAIL = \"CLEAN_DETAIL\"\r\nexport const GET_NAME_POKEMON = \"GET_NAME_POKEMON\"\r\n\r\n\r\n\r\nexport function getPokemons() {\r\n    return async function (dispatch) {\r\n        var json = await axios(\"http://localhost:3001/pokemons\", {});\r\n        return dispatch({\r\n            type: GET_POKEMONS,\r\n            payload: json.data,\r\n        });\r\n    };\r\n}\r\n\r\n\r\nexport function getTypes() {\r\n    return async function (dispatch) {\r\n        var json = await axios(\"http://localhost:3001/types\", {});\r\n        return dispatch({\r\n            type: GET_TYPES,\r\n            payload: json.data,\r\n        });\r\n    };\r\n}\r\n\r\n\r\n\r\nexport function getPokemonName(name){\r\n    return async function (dispatch){\r\n        var json = await axios(\"http://localhost:3001/pokemons?name=\" + name);\r\n        return dispatch({\r\n            type: GET_NAME_POKEMON,\r\n            payload: json.data\r\n        });\r\n    }\r\n}\r\n\r\nexport function getDetail(id) {\r\n    return async function (dispatch) {\r\n        var json = await axios(\"http://localhost:3001/pokemons/\" + id);\r\n        return dispatch({\r\n            type: GET_DETAIL,\r\n            payload: json.data\r\n        });\r\n    };\r\n}\r\n\r\n\r\nexport function filterTypes(payload){\r\n    return ({\r\n        type: FILTER_TYPES,\r\n        payload\r\n    })\r\n}\r\n\r\nexport function sortByName(payload) {\r\n    return {\r\n        type: SORT_BY_NAME,\r\n        payload,\r\n    }\r\n}\r\n\r\nexport function myTeam(payload) {\r\n    return {\r\n        type: MY_TEAM,\r\n        payload,\r\n    }\r\n}\r\n\r\nexport function cleanDetail(){\r\n    return{\r\n        type: CLEAN_DETAIL,\r\n    }\r\n}\r\n\r\n","/* eslint-disable jsx-a11y/img-redundant-alt */\r\nimport React from \"react\";\r\nimport Style from \"../styles/CardComponent.css\"\r\nimport Card from 'react-bootstrap/Card';\r\n\r\nexport default function CardComponent({id, name, img, types}){\r\n    return(\r\n        <Card className=\"card\"  >\r\n        <div class=\"card-title\">\r\n        <Card.Title>\r\n            {id}.\r\n        </Card.Title>\r\n        <Card.Title>\r\n            {name}\r\n        </Card.Title>\r\n        </div>\r\n        <Card.Img variant=\"top\"  src={img} class=\"card-img-top\" alt=\"Not image\" />\r\n            <Card.Text> type: {\r\n                    types?.map((el) => {\r\n                        return (\r\n                            <div className=\"type-name\">\r\n                            {el.name} \r\n                            </div>\r\n                        )\r\n                    })\r\n                }\r\n            </Card.Text>\r\n        </Card>\r\n    )\r\n}","import React from 'react';\r\nimport Style from '../styles/Pagination.css'\r\nimport Pagination from 'react-bootstrap/Pagination';\r\n\r\n\r\nexport default function Paginado ({pokePerPage, allPokemons, paginado}) {\r\n  const pageNumbers = []\r\n\r\n  for ( let i=1; i<=Math.ceil(allPokemons/pokePerPage); i++){\r\n    pageNumbers.push(i)\r\n  }\r\n  \r\n  return (\r\n<Pagination>        \r\n\r\n{ pageNumbers && \r\n        pageNumbers.map(number =>(\r\n          <Pagination.Item className='button-pag' key={number}>\r\n          <a onClick={() => paginado(number)}>{number}</a>\r\n          </Pagination.Item>\r\n        ))}\r\n    </Pagination>\r\n  )\r\n}\r\n","import React from \"react\";\r\nimport { useState} from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { getPokemonName } from \"../actions\";\r\nimport \"../styles/SearchBar.css\"\r\n\r\n\r\nexport default function SearchBar(){\r\n\r\n    const dispatch = useDispatch();\r\n    const [name, setName] = useState('');\r\n\r\n    function handleInputChange(e){\r\n        e.preventDefault();\r\n        setName(e.target.value);\r\n       // console.log(name);\r\n    }\r\n\r\n    \r\n\r\n    function handleSubmit(e){\r\n        e.preventDefault();\r\n        var found = getPokemonName(name);\r\n        dispatch(found)\r\n        setName('');\r\n    }\r\n\r\n    return (\r\n        <div className=\"search-box\">\r\n            \r\n            <input\r\n                type='text'\r\n                placeholder='Search by name...' \r\n                onChange={e => handleInputChange(e)}\r\n                value={name}\r\n                className='input-search'\r\n                onKeyPress={e => e.key === 'Enter' && handleSubmit(e)}\r\n            />\r\n            <div className=\"lupa-search\"></div>\r\n            {/* <button\r\n                type='submit'\r\n                onClick={e => handleSubmit(e)}\r\n                className='btn-search'\r\n            >\r\n                <i class=\"fasfa-search\">search</i>\r\n            </button> */}\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport { useEffect, useState } from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\"\r\nimport { \r\n    getPokemons, \r\n    getPokemonName,\r\n    getDetail,\r\n    getTypes,\r\n    sortByName,\r\n    filterTypes\r\n    } from \"../actions/index\";\r\nimport { Link } from \"react-router-dom\";\r\nimport CardComponent from \"./CardComponent\"\r\nimport Paginado from \"./Paginado\"\r\nimport SearchBar from \"./SearchBar\";\r\nimport Style from \"../styles/Home.css\"\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col'\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Accordion from 'react-bootstrap/Accordion';\r\nimport CardGroup from 'react-bootstrap/CardGroup';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Card from 'react-bootstrap/Card';\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default function Home() {\r\n\r\n    const dispatch = useDispatch()\r\n    const allPokemons = useSelector ((state) => state.pokemons)\r\n    const allTypes = useSelector((state) => state.types);\r\n    const allTypesFilt = allTypes.filter(poke => poke.name !== \"unknown\")\r\n\r\n\r\n    const [currentPage, setCurrentPage] = useState(1); // En una constante me guardo el estado local actual y la otra me setea el estado actual. El state inicial es 1 porque empiezo en la primer página.\r\n    const [pokePerPage, /*_setPokesPerPage*/] = useState(12); // Me guardo cuantos perros quiero por página.\r\n    const indexOfLastPoke = currentPage * pokePerPage; // El índice del último perro de cada página va a ser el numero de la página multiplicado por la cantidad de perros por página.\r\n    const indexOfFirstPoke = indexOfLastPoke - pokePerPage; // El índice del primer perro de cada página va a ser el índice del último de esa página menos la cantidad de perros por página.\r\n    const currentPoke = allPokemons.slice(indexOfFirstPoke, indexOfLastPoke);\r\n\r\n    const [/*_orden*/, setOrden] = useState(''); // Estado local que me sirve para modificar el estado cuando ordeno y renderizar los perros ordenados como quiero.\r\n\r\n    const paginado = (pageNumber) => {\r\n        setCurrentPage(pageNumber);\r\n    }\r\n\r\n    useEffect(() => {\r\n        dispatch(getPokemons())\r\n    }, [dispatch])\r\n\r\n    useEffect(() => {\r\n        dispatch(getTypes())\r\n    }, [dispatch])\r\n\r\n\r\n    function handleClick(e) {\r\n        e.preventDefault();\r\n        setCurrentPage(1);\r\n        dispatch(getPokemons())\r\n    }\r\n\r\n    function handleFilterTypes(e) {\r\n        e.preventDefault();\r\n        setCurrentPage(1);\r\n        dispatch(filterTypes(e.target.value))\r\n    }\r\n\r\n    function handleSortByName(e) {\r\n        e.preventDefault();\r\n        dispatch(sortByName(e.target.value));\r\n        setCurrentPage(1);\r\n        setOrden(`Ordered ${e.target.value}`);\r\n    }\r\n\r\n\r\n    return(\r\n        <Container className=\"container-home\" fluid>\r\n        <Row>\r\n        <Col md=\"auto\" className=\"menu\">\r\n        <div className=\"prueba-menu\">\r\n        <div className=\"oculto\">\r\n        <div className=\"side-menu\">\r\n                                    <button className=\"all-button\"  onClick={e => {handleClick(e)}}>\r\n                                        Reloaded pokemons\r\n                                    </button>\r\n                                    \r\n                                    <select className=\"select-button\" defaultValue=\"Sort pokemons by name\"onChange={e => handleSortByName(e)}>\r\n                                        <option className=\"select-option\" value= \"all\">Default</option>\r\n                                        <option className=\"select-option\" value= \"asc\">Ascendente</option>\r\n                                        <option className=\"select-option\" value= \"desc\">Descendente</option>\r\n                                    </select>\r\n                                    \r\n                                    <select className=\"select-button\" onChange={e => handleFilterTypes(e)} >\r\n                                        <option className=\"select-option\" key={0} value='all'>All types</option>\r\n                                            {allTypesFilt.map(el => {\r\n                                                return (\r\n                                        <option className=\"select-option\" key={el.id} value={el.name}>{el.name}</option>\r\n                                                            )\r\n                                                    }) \r\n                                            }    \r\n                                    </select>\r\n                                    \r\n                                    <select className=\"select-button\">\r\n                                        <option className=\"select-option\" value= \"all\">Todos</option>\r\n                                        <option className=\"select-option\" value= \"api\">Existentes</option>\r\n                                        <option className=\"select-option\" value= \"created\">Creados</option>\r\n                                    </select>\r\n                                    </div>\r\n        </div>\r\n        <div className=\"ocultar\">\r\n        <div className=\"menu-icon\"></div>\r\n         </div>\r\n        </div>\r\n                {/* <Navbar className=\"navbar\">\r\n                    <Accordion  defaultActiveKey={['0']} alwaysOpen> \r\n                        <Accordion.Item><Accordion.Button className=\"accordion-btn\" >\r\n                        </Accordion.Button>\r\n                        <Accordion.Body className=\"accordion-body\">\r\n                            <Container className=\"container-menu\">\r\n                                <Nav className=\"flex-column\">\r\n                                    <Button className=\"dropdownToggle\"  variant=\"secondary\" onClick={e => {handleClick(e)}}>\r\n                                        Reloaded pokemons\r\n                                    </Button>\r\n                                    <Dropdown>\r\n                                    <Dropdown.Toggle className=\"dropdownToggle\"  variant=\"secondary\" id=\"dropdown-variants-Secondary\">\r\n                                        Sort pokemons by name\r\n                                    </Dropdown.Toggle>\r\n                                    <Dropdown.Menu defaultValue=\"Sort pokemons by name\"onChange={e => handleSortByName(e)}>\r\n                                        <Dropdown.Item value= \"all\">Default</Dropdown.Item>\r\n                                        <Dropdown.Item value= \"asc\">Ascendente</Dropdown.Item>\r\n                                        <Dropdown.Item value= \"desc\">Descendente</Dropdown.Item>\r\n                                    </Dropdown.Menu>\r\n                                    </Dropdown>\r\n                                    <Dropdown >\r\n                                    <Dropdown.Toggle className=\"dropdownToggle\" variant=\"secondary\" id=\"dropdown-variants-Secondary\">\r\n                                        Filter by types\r\n                                    </Dropdown.Toggle>\r\n                                    <Dropdown.Menu  onChange={e => handleFilterTypes(e)} >\r\n                                        <Dropdown.Item key={0} value='all'>All types</Dropdown.Item>\r\n                                            {allTypesFilt.map(el => {\r\n                                                return (\r\n                                        <Dropdown.Item key={el.id} value={el.name}>{el.name}</Dropdown.Item>\r\n                                                            )\r\n                                                    }) \r\n                                            }    \r\n                                    </Dropdown.Menu>\r\n                                    </Dropdown>\r\n                                    <Dropdown >\r\n                                    <Dropdown.Toggle className=\"dropdownToggle\" variant=\"secondary\" id=\"dropdown-variants-Secondary\">\r\n                                        Filter by created\r\n                                    </Dropdown.Toggle>\r\n                                    <Dropdown.Menu >\r\n                                        <Dropdown.Item value= \"all\">Todos</Dropdown.Item>\r\n                                        <Dropdown.Item value= \"api\">Existentes</Dropdown.Item>\r\n                                        <Dropdown.Item value= \"created\">Creados</Dropdown.Item>\r\n                                    </Dropdown.Menu>\r\n                                    </Dropdown>\r\n                                    <Link to='/pokemons'>new</Link>\r\n                                </Nav>\r\n                            </Container>\r\n                        </Accordion.Body>\r\n                        </Accordion.Item>\r\n                    </Accordion>\r\n                </Navbar>  */}\r\n        </Col>\r\n        <Col className=\"col-right\">\r\n        <div className=\"nav-bar-title\">\r\n            <h1 className=\"title\">Pokémon APP</h1>\r\n            <div className=\"search\"><SearchBar /></div>\r\n            </div>\r\n        <Row>\r\n            <Col className=\"paginado\">\r\n        <Paginado \r\n        pokePerPage={pokePerPage} allPokemons={allPokemons.length} paginado={paginado} \r\n        />\r\n        </Col>\r\n        </Row>\r\n\r\n        <Row >\r\n            \r\n            <div className=\"cards\" > \r\n                {\r\n                // eslint-disable-next-line array-callback-return\r\n                currentPoke.length > 0 ? currentPoke.map((poke) =>{\r\n                    return(\r\n                        <div  key={poke.id}>\r\n                        \r\n                        <Link  to={'/home/' + poke.id} style={{ textDecoration: 'none' }} >\r\n                        <CardComponent\r\n                            id={poke.id}\r\n                            name={poke.name} \r\n                            img={poke.img}\r\n                            \r\n                            types={poke.types ? poke.types : \"not type\"}\r\n                        />\r\n                        \r\n                        </Link>\r\n                        \r\n                        </div>\r\n                        )\r\n                    }) : \r\n                    <div className=\"container-waiting\"><div className=\"container-spinner-home\">\r\n                <div className=\"container-icon-home\"></div>\r\n\r\n                </div>\r\n                </div>\r\n                }\r\n                \r\n                \r\n                </div>\r\n                \r\n                </Row>\r\n                \r\n        </Col>\r\n        </Row>\r\n        </Container>\r\n    )\r\n}","import React from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\"\r\nimport { \r\n    getDetail,\r\n    cleanDetail,\r\n    } from \"../actions/index\";\r\nimport { Link } from \"react-router-dom\"\r\nimport Style from \"../styles/Detail.css\"\r\nimport Card from 'react-bootstrap/Card';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col'\r\n\r\n\r\n\r\n\r\n\r\nexport default function Detail(props) {\r\n\r\n    const dispatch = useDispatch()\r\n    const id = props.match.params.id;\r\n    const next = parseInt(props.match.params.id) + parseInt(1)  \r\n    const back = parseInt(props.match.params.id) >= 1 ? parseInt(props.match.params.id) - parseInt(1) : parseInt(props.match.params.id)  \r\n\r\n    useEffect(() => {\r\n        dispatch(getDetail(id));   \r\n        dispatch(cleanDetail()); \r\n    }, [dispatch, id]);\r\n\r\n\r\n    const myPokemon = useSelector((state) => state.detail);\r\n\r\n    return(\r\n        <Container className=\"container-detail\" fluid>\r\n        <Row>\r\n        <Col>\r\n        <div className=\"button-sector\">\r\n            <Link to='/home'><button class=\"cardBoton\" id='home' >Back home </button></Link>\r\n            <Link  to={'/home/' + next } style={{ textDecoration: 'none' }} ><button class=\"cardBoton\" id='next' >Next </button></Link>\r\n            <Link  to={'/home/' + back } style={{ textDecoration: 'none' }} ><button class=\"cardBoton\" id='next' >Back </button></Link>\r\n            </div>\r\n        </Col>\r\n        <Col>\r\n        <div className=\"detail-card\">\r\n            { \r\n                myPokemon.length > 0 ?\r\n                <Row >\r\n                    <div className=\"fila1\">\r\n                        \r\n                        <Card.Img className=\"card-detail-img\"\r\n                            variant=\"top\"  \r\n                            src={myPokemon[0].img}\r\n                            alt={myPokemon[0].name}\r\n                        />\r\n                        <div className=\"name-type\">\r\n                        <div className=\"card-detail-title\">\r\n                            {myPokemon[0].name}\r\n                        </div>\r\n                        <div className=\"card-type-text\">Type:\r\n                            {myPokemon[0].types.map(type => <div>{type.name}</div>)}\r\n                        </div>\r\n                        </div>\r\n                        </div>\r\n                        <Row>\r\n                        <div className=\"card-detail-text-container\">\r\n                        <Col>\r\n                        \r\n                        <div className=\"card-detail-text\">\r\n                        <h3>Altura:\r\n                            </h3>\r\n                            <div className=\"envolt-barra\">\r\n                            \r\n                            <div style={{background: \"orange\", width: `${myPokemon[0].height }%`, \"border-radius\": \"1rem 0rem 0rem 1rem\"}}>\r\n                            \r\n                            </div>\r\n                            {myPokemon[0].height}\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"card-detail-text\">\r\n                        <h3>\r\n                        Peso:\r\n                            \r\n                        </h3>\r\n                        <div className=\"envolt-barra\">\r\n                            <div style={{background: \"green\", width: `${myPokemon[0].weight}%`, \"border-radius\": \"1rem 0rem 0rem 1rem\"}}>\r\n                            \r\n                            </div>\r\n                            {myPokemon[0].weight}\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"card-detail-text\">\r\n                        <h3>\r\n                        Vida:\r\n                            \r\n                        </h3>\r\n                        <div className=\"envolt-barra\">\r\n                        <div style={{background: \"blue\", width: `${myPokemon[0].hp }%`, \"border-radius\": \"1rem 0rem 0rem 1rem\"}}>\r\n                        \r\n                            </div>\r\n                            {myPokemon[0].hp}\r\n                            </div>\r\n                        </div>\r\n                        </Col>\r\n                        <Col>\r\n                        <div  className=\"card-detail-text\">\r\n                        <h3>\r\n                        Ataque:\r\n                            \r\n                        </h3>\r\n                        <div className=\"envolt-barra\">\r\n                        <div style={{background: \"red\", width: `${myPokemon[0].attack }%`, \"border-radius\": \"1rem 0rem 0rem 1rem\"}}>\r\n                        \r\n                            </div>\r\n                            {myPokemon[0].attack}\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"card-detail-text\">\r\n                        <h3>\r\n                        Defensa:\r\n                            \r\n                        </h3>\r\n                        <div className=\"envolt-barra\">\r\n                        <div style={{background: \"yellow\", width: `${myPokemon[0].defense }%`, \"border-radius\": \"1rem 0rem 0rem 1rem\"}}>\r\n                        \r\n                            </div>\r\n                            {myPokemon[0].defense}\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"card-detail-text\">\r\n                        <h3>\r\n                        Velocidad:\r\n                            \r\n                        </h3>\r\n                        <div className=\"envolt-barra\">\r\n                        <div style={{background: \"grey\", width: `${myPokemon[0].speed }%`, \"border-radius\": \"1rem 0rem 0rem 1rem\"}}>\r\n                                \r\n                            </div>\r\n                            {myPokemon[0].speed}\r\n                            </div>\r\n                        </div>\r\n                        \r\n                        </Col>\r\n                        </div>\r\n                        </Row>\r\n                        \r\n                        \r\n\r\n                </Row>\r\n                :\r\n\r\n                <div className=\"container-spinner\">\r\n                <div className=\"container-icon\"></div>\r\n                    {/* <div class=\"spinner-grow\" role=\"status\">\r\n                    <span class=\"visually-hidden\">Loading...</span>                    \r\n                    </div> */}\r\n                </div>\r\n             }\r\n             </div>\r\n             </Col>\r\n            </Row>\r\n        </Container>\r\n    )\r\n}","import './App.css';\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport LandingPage from \"./components/LandingPage\";\nimport Home from \"./components/Home\";\nimport Detail from './components/Detail';\n\n\n\nfunction App() {\n  return (\n    <BrowserRouter>\n    <div className=\"App\">\n      <Switch>\n        <Route exact path=\"/\" component={LandingPage} />\n        <Route exact path=\"/home\" component={Home} />\n        <Route path=\"/home/:id\" component={Detail} />\n      </Switch>\n    </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { \r\n    GET_POKEMONS,\r\n    GET_NAME_POKEMON,\r\n    GET_DETAIL,\r\n    GET_TYPES,\r\n    FILTER_TYPES,\r\n    SORT_BY_NAME,\r\n    CLEAN_DETAIL\r\n} from \"../actions\";\r\n\r\nconst initialState = {\r\n    pokemons: [],\r\n    allPokemons: [],\r\n    types:[],\r\n    detail:[],\r\n    myTeam:[]\r\n}\r\n\r\nfunction rootReducer (state= initialState,action){\r\n    switch(action.type){\r\n            case GET_POKEMONS:\r\n                return {\r\n                    ...state,\r\n                    pokemons: action.payload,\r\n                    allPokemons: action.payload\r\n                };\r\n            case GET_NAME_POKEMON:\r\n                return {\r\n                    ...state,\r\n                    pokemons: action.payload,\r\n                    allPokemons: action.payload\r\n\r\n                }\r\n            case GET_DETAIL:\r\n                return{\r\n                    ...state,\r\n                    detail: action.payload\r\n                }\r\n            case GET_TYPES:\r\n                return{\r\n                    ...state,\r\n                    types: action.payload\r\n                }\r\n            \r\n            case FILTER_TYPES:{\r\n                const allPoke =  state.allPokemons\r\n                const filtered = action.payload === 'all' ? allPoke : allPoke.filter((poke) => {\r\n                        let types = poke.types.map(el => el.name);\r\n                        return types.includes(action.payload);\r\n                });\r\n                return {\r\n                    ...state,\r\n                    allPokemons: filtered\r\n                }\r\n            }\r\n\r\n            case CLEAN_DETAIL:\r\n                    return {\r\n                        ...state,\r\n                        detail: [],\r\n                    }\r\n\r\n            case SORT_BY_NAME:\r\n            const sortedName = action.payload === 'asc' ?\r\n                state.pokemons.sort(function (a, b) {\r\n                    if (a.name.toLowerCase() > b.name.toLowerCase()) {\r\n                        return 1;\r\n                    }\r\n                    if (b.name.toLowerCase() > a.name.toLowerCase()) {\r\n                        return -1;\r\n                    }\r\n                    return 0\r\n                }) :\r\n                state.pokemons.sort(function (a, b) {\r\n                    if (a.name.toLowerCase() > b.name.toLowerCase()) {\r\n                        return -1;\r\n                    }\r\n                    if (b.name.toLowerCase() > a.name.toLowerCase()) {\r\n                        return 1;\r\n                    }\r\n                    return 0;\r\n                })\r\n                \r\n            // case: MY_TEAM:{\r\n            //     const team = \r\n            // return {\r\n            //     ...state,\r\n            //     myTeam: team\r\n            // }\r\n            // }\r\n            return {\r\n                ...state,\r\n                pokemons: sortedName,\r\n            }\r\n        default:\r\n            return state;\r\n        }\r\n    }\r\n    \r\n\r\nexport default rootReducer;","import { createStore, applyMiddleware } from \"redux\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport thunk from \"redux-thunk\"\r\nimport rootReducer from \"../reducer\";\r\n\r\nexport const store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)))","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\"\nimport {store} from \"./store\";\nimport * as bootstrap from 'bootstrap'\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(\n  <Provider store={store}>\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}